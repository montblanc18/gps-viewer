// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterDeviceGPS register device g p s
//
// swagger:model registerDeviceGPS
type RegisterDeviceGPS struct {

	// device Id
	// Example: 99999
	// Required: true
	DeviceID *int64 `json:"deviceId"`

	// device type
	// Example: microcomputer
	// Required: true
	DeviceType *string `json:"deviceType"`

	// lat
	// Example: 34.69139
	// Required: true
	Lat *float64 `json:"lat"`

	// lng
	// Example: 135.18306
	// Required: true
	Lng *float64 `json:"lng"`

	// recorded at
	// Required: true
	// Format: date-time
	RecordedAt *strfmt.DateTime `json:"recordedAt"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *RegisterDeviceGPS) UnmarshalJSON(data []byte) error {
	var props struct {

		// device Id
		// Example: 99999
		// Required: true
		DeviceID *int64 `json:"deviceId"`

		// device type
		// Example: microcomputer
		// Required: true
		DeviceType *string `json:"deviceType"`

		// lat
		// Example: 34.69139
		// Required: true
		Lat *float64 `json:"lat"`

		// lng
		// Example: 135.18306
		// Required: true
		Lng *float64 `json:"lng"`

		// recorded at
		// Required: true
		// Format: date-time
		RecordedAt *strfmt.DateTime `json:"recordedAt"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.DeviceID = props.DeviceID
	m.DeviceType = props.DeviceType
	m.Lat = props.Lat
	m.Lng = props.Lng
	m.RecordedAt = props.RecordedAt
	return nil
}

// Validate validates this register device g p s
func (m *RegisterDeviceGPS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLng(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterDeviceGPS) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *RegisterDeviceGPS) validateDeviceType(formats strfmt.Registry) error {

	if err := validate.Required("deviceType", "body", m.DeviceType); err != nil {
		return err
	}

	return nil
}

func (m *RegisterDeviceGPS) validateLat(formats strfmt.Registry) error {

	if err := validate.Required("lat", "body", m.Lat); err != nil {
		return err
	}

	return nil
}

func (m *RegisterDeviceGPS) validateLng(formats strfmt.Registry) error {

	if err := validate.Required("lng", "body", m.Lng); err != nil {
		return err
	}

	return nil
}

func (m *RegisterDeviceGPS) validateRecordedAt(formats strfmt.Registry) error {

	if err := validate.Required("recordedAt", "body", m.RecordedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("recordedAt", "body", "date-time", m.RecordedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register device g p s based on context it is used
func (m *RegisterDeviceGPS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegisterDeviceGPS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterDeviceGPS) UnmarshalBinary(b []byte) error {
	var res RegisterDeviceGPS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
