// Code generated by go-swagger; DO NOT EDIT.

package gps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetGpsByDeviceIDHandlerFunc turns a function with the right signature into a get gps by device Id handler
type GetGpsByDeviceIDHandlerFunc func(GetGpsByDeviceIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGpsByDeviceIDHandlerFunc) Handle(params GetGpsByDeviceIDParams) middleware.Responder {
	return fn(params)
}

// GetGpsByDeviceIDHandler interface for that can handle valid get gps by device Id params
type GetGpsByDeviceIDHandler interface {
	Handle(GetGpsByDeviceIDParams) middleware.Responder
}

// NewGetGpsByDeviceID creates a new http.Handler for the get gps by device Id operation
func NewGetGpsByDeviceID(ctx *middleware.Context, handler GetGpsByDeviceIDHandler) *GetGpsByDeviceID {
	return &GetGpsByDeviceID{Context: ctx, Handler: handler}
}

/* GetGpsByDeviceID swagger:route GET /gps/{deviceId} gps getGpsByDeviceId

Return device gps info

*/
type GetGpsByDeviceID struct {
	Context *middleware.Context
	Handler GetGpsByDeviceIDHandler
}

func (o *GetGpsByDeviceID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetGpsByDeviceIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
