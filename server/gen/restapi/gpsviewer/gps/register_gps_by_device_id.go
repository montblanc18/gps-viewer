// Code generated by go-swagger; DO NOT EDIT.

package gps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RegisterGpsByDeviceIDHandlerFunc turns a function with the right signature into a register gps by device Id handler
type RegisterGpsByDeviceIDHandlerFunc func(RegisterGpsByDeviceIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterGpsByDeviceIDHandlerFunc) Handle(params RegisterGpsByDeviceIDParams) middleware.Responder {
	return fn(params)
}

// RegisterGpsByDeviceIDHandler interface for that can handle valid register gps by device Id params
type RegisterGpsByDeviceIDHandler interface {
	Handle(RegisterGpsByDeviceIDParams) middleware.Responder
}

// NewRegisterGpsByDeviceID creates a new http.Handler for the register gps by device Id operation
func NewRegisterGpsByDeviceID(ctx *middleware.Context, handler RegisterGpsByDeviceIDHandler) *RegisterGpsByDeviceID {
	return &RegisterGpsByDeviceID{Context: ctx, Handler: handler}
}

/* RegisterGpsByDeviceID swagger:route POST /gqs/{deviceId} gps registerGpsByDeviceId

Register a device GPS by ID

*/
type RegisterGpsByDeviceID struct {
	Context *middleware.Context
	Handler RegisterGpsByDeviceIDHandler
}

func (o *RegisterGpsByDeviceID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterGpsByDeviceIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
